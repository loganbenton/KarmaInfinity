{"name":"Karmainfinity","tagline":"A Reddit Upvote Bot","body":"# KarmaInfinity\r\n\r\n### What is KarmaInfinity?\r\nKarmaInfinity is reddit upvote bot. It uses a single proxy per account to mimic reality for each user.\r\n![Current GUI](http://i.imgur.com/3ynCcIB.png)\r\n\r\n### What can it do?\r\nKarmaInfinity can login with a user, retrieve submissions of /u/ and /r/ pages, vote on submissions, and even cycle through a list of proxied accounts doing each of these actions.\r\n\r\n### What's next?\r\nCurrent I would like to focus attention on creating a stable bot with single user upvoting, multiple user upvoting, and automatic account creation. All of these features will need to be implemented with realistic interaction as well as randomizing so that the accounts remain unbanned. \r\n\r\n## How to contribute?\r\nTo contribute please fork the repo and make all alterations on that fork. After your feature is ready to be merged into the main code, send a pull request! I will check over it and accept it if it works as wanted.\r\n####_All code must be commented and well written_\r\n\r\nBe sure to make the bot realistic and randomized!\r\n_Send in a pull request and I'll be happy to merge!_\r\n\r\n### Dependencies\r\n[jReddit](https://github.com/karan/jReddit)\r\n\r\n[JSON-simple](http://code.google.com/p/json-simple/)\r\n\r\n### Examples of using the API - [More examples](https://github.com/karan/jReddit/blob/master/implemented_methods.md)\r\nI have implemented some of my own methods which can be found in Submission.java and Submissions.java\r\nUpvote every submission on the frontpage of a subreddit\r\n\r\n    import im.goel.jreddit.submissions.Submission;\r\n    import im.goel.jreddit.submissions.Submissions;\r\n    import im.goel.jreddit.user.User;\r\n\r\n    public final class Test {\r\n\t    public static void main(String[] args) throws Exception {\r\n\t\t    User user = new User(\"username\", \"password\");\r\n\t\t    user.connect();\r\n\r\n\t\t    for (Submission submission : Submissions.getSubmissions(\"programming\",\r\n\t\t\t\t    Submissions.HOT, Submissions.FRONTPAGE, user)) {\r\n\t\t\t    submission.upVote();\r\n\t\t    }\r\n\t    }\r\n    }\r\n\r\nSubmit a link and self post\r\n\r\n\timport im.goel.jreddit.user.User;\r\n\t\r\n\tpublic final class Test {\r\n\t\tpublic static void main(String[] args) throws Exception {\r\n\t\t\tUser user = new User(\"username\", \"password\");\r\n\t\t\tuser.connect();\r\n\t\r\n\t\t\tuser.submitLink(\r\n\t\t\t\t\t\"Oracle V Google judge is a programmer!\",\r\n\t\t\t\t\t\"http://www.i-programmer.info/news/193-android/4224-oracle-v-google-judge-is-a-programmer.html\",\r\n\t\t\t\t\t\"programming\");\r\n\t\t\tuser.submitSelfPost(\"What's the difference between a duck?\",\r\n\t\t\t\t\t\"One of its legs are both the same!\", \"funny\");\r\n\t\t}\r\n\t}\r\n\t\r\nList all submissions made by user called USERNAME_OF_OTHER_USER\r\n\r\n\timport im.goel.jreddit.submissions.Submission;\r\n\timport im.goel.jreddit.user.User;\r\n\t\r\n\t/**\r\n\t * @author Benjamin Jakobus\r\n\t */\r\n\tpublic final class Test {\r\n\t\tpublic static void main(String[] args) throws Exception {\r\n\t\t\tUser user = new User(\"username\", \"password\");\r\n        \t\tuser.connect();\r\n\r\n        \t\tList<Submission> submissions = User.submissions(\"USERNAME_OF_OTHER_USER\");\r\n        \t\t// To list hidden submissions, user User.hidden(\"...\");\r\n\t\t\r\n\t\t\tfor (Submission s : submissions) {\r\n\t\t\t\t// Print info here\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\nSend a message to another user\r\n\r\n\timport im.goel.jreddit.message.Messages;\r\n\timport im.goel.jreddit.user.User;\r\n\r\n\r\n\tpublic class ComposeTest {\r\n\r\n\t\t/**\r\n\t\t * @author Karan Goel\r\n\t\t */\r\n\t\tpublic static void main(String[] args) {\r\n\t\t\tUser user = null;\r\n\t\t\tusername_of_recipient = \"other_user\";\r\n\t\t\ttry {\r\n\t\t\t\tuser = new User(\"username\", \"password\"); // Add your username and password\r\n\t\t\t\tuser.connect();\r\n\t\t\t} catch (Exception exception) {\r\n\t\t\t\texception.printStackTrace();\r\n\t\t\t}\r\n\t\t\t\r\n\t\t\tnew Messages().compose(user, username_of_recipient, \"this is the title\", \"the message\", \"\", \"\");\r\n\t\t}\r\n\r\n\t}\r\n","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}